name: buildah-build-openscenegraph
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/buildah-build-openscenegraph.yml # Self-trigger
      - containers/openscenegraph-devel/Dockerfile

env:
  REGISTRY: ghcr.io/bounverif
  IMAGE_NAME: esmini
  PODMAN_ARCH: amd64
  PLATFORM: linux-amd64
  OPENSCENEGRAPH_VERSION: latest
  OPENSCENEGRAPH_LATEST_VERSION: latest

permissions:
  contents: read
  packages: write

jobs:
  buildah-build:
    name: Build container images
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm]
    runs-on: ${{ matrix.os }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.os }}
      cancel-in-progress: true

    steps:
      - name: Install container tools
        run: sudo apt-get install podman buildah jq

      - name: Prepare environment variables
        run: |
          echo "PODMAN_ARCH=$(podman info --format='{{.Host.Arch}}')" >> $GITHUB_ENV
          echo "PLATFORM=$(podman info --format='{{.Version.OsArch}}' | sed 's/\//-/g')" >> $GITHUB_ENV
          if [ "${{ env.OPENSCENEGRAPH_VERSION }}" == "latest" ]; then
            echo "OPENSCENEGRAPH_VERSION=$(curl -sL "https://api.github.com/repos/openscenegraph/OpenSceneGraph/tags" | jq -r '.[0].name' | sed 's/^OpenSceneGraph-//')" >> $GITHUB_ENV
          fi
          echo "OPENSCENEGRAPH_LATEST_VERSION=$(curl -sL "https://api.github.com/repos/openscenegraph/OpenSceneGraph/tags" | jq -r '.[0].name' | sed 's/^OpenSceneGraph-//')" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build openscenegraph container image
        id: build-openscenegraph
        uses: redhat-actions/buildah-build@v2
        with:
          context: ./containers
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.OPENSCENEGRAPH_VERSION }}-devel ${{ env.OPENSCENEGRAPH_VERSION }}-devel-${{ env.PODMAN_ARCH }}
          layers: true
          oci: true
          build-args: |
            ESMINI_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            OPENSCENEGRAPH_VERSION=${{ env.OPENSCENEGRAPH_VERSION }}
          extra-args: |
            --target esmini-openscenegraph
          containerfiles: |
            ./containers/openscenegraph/Dockerfile

      - name: Push to GitHub Container Repository
        if: github.ref == 'refs/heads/main'
        id: push-openscenegraph-ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          registry: ${{ env.REGISTRY }}
          image: ${{ steps.build-openscenegraph.outputs.image }}
          tags: ${{ env.OPENSCENEGRAPH_VERSION }}-openscenegraph-${{ env.PODMAN_ARCH }}
          digestfile: ${{ runner.temp }}/digest-esmini-openscenegraph-${{ env.PLATFORM }}

      - name: Upload digests
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: digest-esmini-${{ env.OPENSCENEGRAPH_VERSION }}-${{ env.PLATFORM }}
          path: ${{ runner.temp }}/digest-*
          if-no-files-found: error
          retention-days: 1
          compression-level: 0 # no compression

  buildah-merge:
    name: Merge container images
    runs-on: ubuntu-24.04
    needs: buildah-build
    if: github.ref == 'refs/heads/main' && always()
    steps:
      # - run: mkdir -p $TMPDIR
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digest-*
          merge-multiple: true

      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare environment variables
        run: |
          if [ "${{ env.OPENSCENEGRAPH_VERSION }}" == "latest" ]; then
            echo "OPENSCENEGRAPH_VERSION=$(curl -sL "https://api.github.com/repos/openscenegraph/OpenSceneGraph/tags" | jq -r '.[0].name' | sed 's/^OpenSceneGraph-//')" >> $GITHUB_ENV
          fi
          echo "OPENSCENEGRAPH_LATEST_VERSION=$(curl -sL "https://api.github.com/repos/openscenegraph/OpenSceneGraph/tags" | jq -r '.[0].name' | sed 's/^OpenSceneGraph-//')" >> $GITHUB_ENV

      - name: Create and push manifest list for openscenegraph
        run: |
          MANIFEST=openscenegraph-devel
          FULL_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          buildah manifest create $MANIFEST
          for digest in ${{ runner.temp }}/digests/digest-esmini-*; do
            echo "Adding $(cat $digest)"
            buildah manifest add $MANIFEST $FULL_IMAGE_NAME@$(cat $digest)
          done
          buildah manifest push --all $MANIFEST docker://$FULL_IMAGE_NAME:${{ env.OPENSCENEGRAPH_VERSION }}-openscenegraph
          if [ "${{ env.OPENSCENEGRAPH_VERSION }}" == "${{ env.ESMINI_LATEST_VERSION }}" ]; then
            buildah manifest push --all $MANIFEST docker://$FULL_IMAGE_NAME:latest-openscenegraph
          fi
